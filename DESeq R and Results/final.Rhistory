demo()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
setwd("C:/Users/Cyreg/Desktop/LM Prog/deseq")
directory <- "C:/Users/Cyreg/Desktop/LM Prog/deseq"
sampleNames<- c("bh1", "bh2","bh3", "serum1", "serum2", "serum3")
sampleCondition<- c("treated","treated","treated","reference","reference","reference")
sampleFiles <- c("bh1.txt", "bh2.txt", "bh3.txt", "serum1.txt", "serum2.txt", "serum3.txt")
sampleTable <- data.frame(sampleName = sampleNames, fileName = sampleFiles, condition = sampleCondition)
library(DESeq2)
sampleTable$condition <- factor(sampleTable$condition)
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable, directory = directory, design = ~ condition)
ddsHTSeq
keep <- rowSums(counts(ddsHTSeq)) >= 10
dds <- ddsHTSeq
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds)
res
dds$condition <- factor(dds$condition, levels = c("treated","reference"))
res <- results(dds, name="condition_treated_vs_reference")
resultsNames(dds)
resLFC <- lfcShrink(dds, coef="condition_treated_vs_reference", type="apeglm")
resLFC
library("BiocParallel")
register(SnowParam(4))
resOrdered <- res[order(res$pvalue),]
summary(res)
sum(res$padj < 0.1, na.rm=TRUE)
resLFC
res
res05 <- results(dds, alpha=0.05)
summary(res05)
plotMA(res, ylim=c(-2,2))
plotMA(resLFC, ylim=c(-2,2))
idx <- identify(res$baseMean, res$log2FoldChange)
rownames(res)[idx]
resNorm <- lfcShrink(dds, coef=2, type="normal")
resNorm <- lfcShrink(dds, coef=2, type="treated")
resNorm <- lfcShrink(dds, coef=2, type="ashr")
install.packages(ashr)
BiocManager::install("ashr")
resNorm <- lfcShrink(dds, coef=2, type="ashr")
resNorm <- lfcShrink(dds, coef=2, type="normal")
resNorm <- lfcShrink(dds, coef=2, type="apeglm")
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
plotMA(resNorm, xlim=xlim, ylim=ylim, main="normal")
plotMA(resAsh, xlim=xlim, ylim=ylim, main="ashr")
resAsh <- lfcShrink(dds, coef=2, type="ashr")
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
plotMA(resNorm, xlim=xlim, ylim=ylim, main="normal")
plotMA(resAsh, xlim=xlim, ylim=ylim, main="ashr")
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
plotMA(resAsh, xlim=xlim, ylim=ylim, main="ashr")
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
library("ggplot2")
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
mcols(res)$description
BiocManager::install("iSEE")
library(DESeq2)
wrapup_for_iSEE <- function(dds, res) {
# dds to vst
vst <- vst(dds)
# initialize the container
se <- SummarizedExperiment(
assays = List(
counts = counts(dds),
normcounts = counts(dds,normalized = TRUE),
vst_counts = assay(vst)
)
)
# adding colData, taken directly from the DESeqDataSet object
colData(se) <- colData(dds)
# extract contrast info
this_contrast <- sub(".*p-value: (.*)","\\1",mcols(res, use.names=TRUE)["pvalue","description"])
# getting the rowData from the dds itself
rdd <- rowData(dds)
# modifying in advance the DESeqResults object
res$log10_baseMean <- log10(res$baseMean)
res$log10_pvalue <- -log10(res$pvalue)
# and for the rowData
rdd$log10_dispersion <- log10(rdd$dispersion)
# adding rowData to se
rowData(se)[[paste0("DESeq2_",gsub(" ","_",this_contrast))]] <- res
# merging in the existing rowData slot
rowData(se) <- cbind(rowData(se), rdd)
return(se)
}
# next, launch iSEE directly on the se object!
se <- wrapup_for_iSEE(dds,res)
library(iSEE)
iSEE(se)
write.csv(as.data.frame(resOrdered),
file="condition_treated_results.csv")
resSig <- subset(resOrdered, padj < 0.1)
resSig
ddsMF <- dds
levels(ddsMF$type)
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
head(assay(vsd), 3)
ntd <- normTransform(dds)
BiocManager::install("vsn")
meanSdPlot(assay(ntd))
libray(vsn)
libray("vsn")
library("vsn")
meanSdPlot(assay(ntd))
BiocManager::install("hexbin")
meanSdPlot(assay(ntd))
meanSdPlot(assay(rld))
BiocManager::install("pheatmap")
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
df <- as.data.frame(colData(dds)[,c("condition","treated")])
df <- as.data.frame(colData(dds)[,c("condition","bh")])
df <- as.data.frame(colData(dds)[,c("treated","bh")])
df <- as.data.frame(colData(dds)[,c("treated","type")])
df <- as.data.frame(colData(dds)[,c("treated","reference")])
df <- as.data.frame(colData(dds)[,c("condition","paired-end")])
df <- as.data.frame(colData(dds)[,c("treated","paired-end")])
df <- as.data.frame(colData(dds)[,c("treated","bh1")])
df <- as.data.frame(colData(dds)[,c(sampleCondition,"paired-end")])
df <- as.data.frame(colData(dds)[,c(sampleCondition,"type")])
df <- as.data.frame(colData(dds)[,c(sampleCondition,sampleNames)])
df <- as.data.frame(colData(dds)[,c("sampleCondition","sampleNames")])
BiocManager::install("RColorBrewer")
library(RColorBrewer)
png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(sampleCondition))])
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[sampleCondition], RowSideColors=mycols[sampleCondition],
margin=c(10, 10), main="Sample Distance Matrix")
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[sampleCondition], RowSideColors=mycols[sampleCondition],
margin=c(10, 10), main="Sample Distance Matrix")
rld
rld2 <- rlogTransformation(dds)
sampleDists <- as.matrix(dist(t(assay(rld2))))
library(gplots)
png("qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[sampleCondition], RowSideColors=mycols[sampleCondition],
margin=c(10, 10), main="Sample Distance Matrix")
rld2
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition, vsd$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
plotPCA(vsd, intgroup=c("condition", "type"))
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds)
results(dds, contrast=c("condition","C","B"))
resultsNames(dds
)
results(dds, contrast=c("condition","reference","treated"))
dds <- DESeq(dds, test="LRT", reduced=~1)
res <- results(dds)
res
resApeT <- lfcShrink(dds, coef=2, type="apeglm", lfcThreshold=1)
plotMA(resApeT, ylim=c(-3,3), cex=.8)
abline(h=c(-1,1), col="dodgerblue", lwd=2)
par(mar=c(8,5,2,2))
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2)
par(mar=c(8,5,2,2))
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2)
plotDispEsts(dds)
metadata(res)$alpha
metadata(res)$filterThreshold
plot(metadata(res)$filterNumRej,
type="b", ylab="number of rejections",
xlab="quantiles of filter")
lines(metadata(res)$lo.fit, col="red")
abline(v=metadata(res)$filterTheta)
plot(metadata(res)$filterNumRej,
type="b", ylab="number of rejections",
xlab="quantiles of filter")
lines(metadata(res)$lo.fit, col="red")
abline(v=metadata(res)$filterTheta)
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resGA <- results(dds, lfcThreshold=.5, altHypothesis="greaterAbs")
resLA <- results(dds, lfcThreshold=.5, altHypothesis="lessAbs")
resG <- results(dds, lfcThreshold=.5, altHypothesis="greater")
resL <- results(dds, lfcThreshold=.5, altHypothesis="less")
drawLines <- function() abline(h=c(-.5,.5),col="dodgerblue",lwd=2)
plotMA(resGA, ylim=ylim); drawLines()
plotMA(resLA, ylim=ylim); drawLines()
plotMA(resG, ylim=ylim); drawLines()
plotMA(resL, ylim=ylim); drawLines()
resGA <- results(dds, lfcThreshold=.5, altHypothesis="greaterAbs")
resLA <- results(dds, lfcThreshold=.5, altHypothesis="lessAbs")
resG <- results(dds, lfcThreshold=.5, altHypothesis="greater")
resL <- results(dds, lfcThreshold=.5, altHypothesis="less")
drawLines <- function() abline(h=c(-.5,.5),col="dodgerblue",lwd=2)
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds)
results(dds, contrast=c("condition","reference","treated"))
par(mfrow=c(2,2),mar=c(2,2,1,1))
ylim <- c(-2.5,2.5)
resGA <- results(dds, lfcThreshold=.5, altHypothesis="greaterAbs")
resLA <- results(dds, lfcThreshold=.5, altHypothesis="lessAbs")
resG <- results(dds, lfcThreshold=.5, altHypothesis="greater")
resL <- results(dds, lfcThreshold=.5, altHypothesis="less")
drawLines <- function() abline(h=c(-.5,.5),col="dodgerblue",lwd=2)
plotMA(resGA, ylim=ylim); drawLines()
plotMA(resLA, ylim=ylim); drawLines()
plotMA(resG, ylim=ylim); drawLines()
plotMA(resL, ylim=ylim); drawLines()
savehistory(file = "final.Rhistory")
